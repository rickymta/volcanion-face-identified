# Default values for face-verification.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  repository: ghcr.io/your-org/volcanion-face-identified
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Environment configuration
environment: production

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8000
  targetPort: 8000

ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "20m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
  hosts:
    - host: api.face-verification.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: face-verification-tls
      hosts:
        - api.face-verification.com

resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - face-verification
        topologyKey: kubernetes.io/hostname

# API Configuration
api:
  secretKey: "change-this-in-production"
  logLevel: "INFO"
  debug: false
  maxUploadSize: "10485760"  # 10MB
  rateLimitPerMinute: 60
  corsOrigins: "https://app.face-verification.com"

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# MongoDB configuration
mongodb:
  enabled: true
  auth:
    enabled: true
    rootUser: root
    rootPassword: "change-this-in-production"
    username: "face_verification_user"
    password: "change-this-in-production"
    database: "face_verification"
  architecture: standalone
  persistence:
    enabled: true
    size: 20Gi
    storageClass: ""
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 250m
      memory: 512Mi
  metrics:
    enabled: true

# Redis configuration  
redis:
  enabled: true
  auth:
    enabled: true
    password: "change-this-in-production"
  architecture: standalone
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: ""
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi
  metrics:
    enabled: true

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    interval: 30s
    path: /monitoring/metrics

# Storage for temporary files
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  mountPath: /app/temp

# Backup configuration
backup:
  enabled: false
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "7d"
  
# Network policies
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# External secrets (if using external-secrets operator)
externalSecrets:
  enabled: false
  secretStore: ""
  refreshInterval: 1h
  secrets: []
