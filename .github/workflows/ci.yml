name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'
  REGISTRY: ghcr.io
  IMAGE_NAME: face-verification-api

jobs:
  # Code Quality & Security Analysis
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better SonarQube analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov black flake8 bandit safety mypy

      - name: Code formatting check
        run: black --check --diff .

      - name: Lint with flake8
        run: |
          # Stop build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking with mypy
        run: mypy domain/ application/ infrastructure/ presentation/ --ignore-missing-imports

      - name: Security scan with bandit
        run: bandit -r . -ll -f json -o bandit-report.json || true

      - name: Dependency security check
        run: safety check --json --output safety-report.json || true

      - name: Upload security artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit & Integration Tests
  tests:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libglib2.0-0

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          MONGODB_URL=mongodb://localhost:27017
          MONGODB_DATABASE=face_verification_test
          REDIS_URL=redis://localhost:6379
          DEBUG=true
          LOG_LEVEL=DEBUG
          ENVIRONMENT=test
          EOF

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --junitxml=junit/test-results-unit.xml --cov=domain --cov=application --cov=infrastructure --cov=presentation
        env:
          ENV_FILE: .env.test

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --junitxml=junit/test-results-integration.xml
        env:
          ENV_FILE: .env.test

      - name: Generate coverage report
        run: |
          pytest tests/ --cov=domain --cov=application --cov=infrastructure --cov=presentation --cov-report=xml --cov-report=html
        env:
          ENV_FILE: .env.test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            junit/test-results-*.xml
            htmlcov/
            coverage.xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Performance & Load Testing
  performance:
    runs-on: ubuntu-latest
    needs: [tests]
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: Start API server
        run: |
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          MONGODB_URL: mongodb://localhost:27017
          MONGODB_DATABASE: face_verification_test

      - name: Run performance tests
        run: |
          locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 60s --host http://localhost:8000 --html performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-report
          path: performance-report.html

  # Docker Build & Security Scan
  docker:
    runs-on: ubuntu-latest
    needs: [code-quality, tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # SonarQube Analysis
  sonarqube:
    runs-on: ubuntu-latest
    needs: [tests]
    if: github.event_name != 'pull_request' || github.event.pull_request.base.ref == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          name: test-results

      - name: Download security reports
        uses: actions/download-artifact@v3
        with:
          name: security-reports

      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Notify CI completion
  notify-ci-completion:
    runs-on: ubuntu-latest
    needs: [code-quality, tests, performance, docker, sonarqube]
    if: always()
    steps:
      - name: Determine CI status
        id: ci-status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.tests.result }}" == "success" && \
                "${{ needs.performance.result }}" == "success" && \
                "${{ needs.docker.result }}" == "success" && \
                "${{ needs.sonarqube.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ CI Pipeline completed successfully - Ready for deployment" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ CI Pipeline failed - Deployment blocked" >> $GITHUB_OUTPUT
          fi

      - name: Notify CI completion
        if: always()
        run: |
          echo "${{ steps.ci-status.outputs.message }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Trigger: ${{ github.event_name }}"
          
          # Summary for GitHub
          echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ steps.ci-status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance**: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Build**: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SonarQube**: ${{ needs.sonarqube.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.ci-status.outputs.status }}" == "success" ]]; then
            echo "- **Next Step**: CD Pipeline will be triggered automatically" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Next Step**: Fix CI issues before deployment" >> $GITHUB_STEP_SUMMARY
          fi

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [notify-ci-completion]
    if: always()
    steps:
      - name: Clean up artifacts
        run: |
          echo "Cleaning up temporary CI artifacts..."
          # Cleanup commands would go here if needed
          echo "CI cleanup completed"
